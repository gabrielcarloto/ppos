int sem_create (semaphore_t *s, int value) {
  s->count = value;
  s->taskQueue = NULL;
  // controle pq o ponteiro não ta no heap
  s->active = 1;

  return 1;
}

int sem_down (semaphore_t *s) {
  if (s == NULL || !s->active) {
    return -1;
  }

  PPOS_PREEMPT_DISABLE;

  s->count--;

  if (s->count >= 0) {
    PPOS_PREEMPT_ENABLE;
    return 0;
  }

  // Habilitar a preempção antes ou depois do task_suspend parece não fazer diferença.
  // Talvez o próprio task_suspend faça isso, já que suspender uma tarefa é preemptar ela.
  PPOS_PREEMPT_ENABLE;

  // ATENÇÃO: não manipular manualmente o s->taskQueue.
  // O queue_append espera que o primeiro elemento da fila seja nulo ou que o prev e o next sejam ele mesmo caso não existam outros elementos.
  // Ou seja, pode manipular, desde que satisfaça essa condição.
  // Mas isso é chato, então só deixa assim. Beijos s2
  task_suspend(taskExec, &s->taskQueue);

  // Aqui é o único lugar que mexe com a ready queue ACHO, então não faz muito sentido 
  // o erro da fila se tornar nula apesar de ainda ter tarefas
  task_yield();

  if (s == NULL || !s->active) {
    return -1;
  }

  return 0;
}

int sem_up (semaphore_t *s) {
  if (s == NULL || !s->active) {
    return -1;
  }

  PPOS_PREEMPT_DISABLE;

  s->count++;

  if (s->count > 0) {
    PPOS_PREEMPT_ENABLE;
    return 0;
  }

  task_t *task = (task_t *)queue_remove((queue_t **)&s->taskQueue, (queue_t *)s->taskQueue);
  PPOS_PREEMPT_ENABLE;

  task_resume(task);

  return 0;
}

int sem_destroy (semaphore_t *s) {
  s->active = 0;

  while (s->taskQueue) {
    task_resume(s->taskQueue);

    // aparentemente, o task_resume já atualiza a fila
    // então isso aqui faz com que nem todas as tarefas sejam acordadas
    /* s->taskQueue = s->taskQueue->next; */
  }

  return 1;
}